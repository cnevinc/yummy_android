package com.cgearc.yummy.dao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table ARTICLE.
 */
public class Article implements Comparable {

    private Long id;
    /** Not-null value. */
    private String body;
    private String hits_daily;
    private String hits_total;
    private String article_id;
    private String comments_count;
    private String link;
    private String public_at;
    private String site_category;
    private String thumb;
    private String title;
    private String user_name;
    private String display_name;
    private String avatar;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ArticleDao myDao;

    private List<Picture> pictureList;
    private List<Favorite> favoriteList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Article() {
    }

    public Article(Long id) {
        this.id = id;
    }

    public Article(Long id, String body, String hits_daily, String hits_total, String article_id, String comments_count, String link, String public_at, String site_category, String thumb, String title, String user_name, String display_name, String avatar) {
        this.id = id;
        this.body = body;
        this.hits_daily = hits_daily;
        this.hits_total = hits_total;
        this.article_id = article_id;
        this.comments_count = comments_count;
        this.link = link;
        this.public_at = public_at;
        this.site_category = site_category;
        this.thumb = thumb;
        this.title = title;
        this.user_name = user_name;
        this.display_name = display_name;
        this.avatar = avatar;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getArticleDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getBody() {
        return body;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setBody(String body) {
        this.body = body;
    }

    public String getHits_daily() {
        return hits_daily;
    }

    public void setHits_daily(String hits_daily) {
        this.hits_daily = hits_daily;
    }

    public String getHits_total() {
        return hits_total;
    }

    public void setHits_total(String hits_total) {
        this.hits_total = hits_total;
    }

    public String getArticle_id() {
        return article_id;
    }

    public void setArticle_id(String article_id) {
        this.article_id = article_id;
    }

    public String getComments_count() {
        return comments_count;
    }

    public void setComments_count(String comments_count) {
        this.comments_count = comments_count;
    }

    public String getLink() {
        return link;
    }

    public void setLink(String link) {
        this.link = link;
    }

    public String getPublic_at() {
        return public_at;
    }

    public void setPublic_at(String public_at) {
        this.public_at = public_at;
    }

    public String getSite_category() {
        return site_category;
    }

    public void setSite_category(String site_category) {
        this.site_category = site_category;
    }

    public String getThumb() {
        return thumb;
    }

    public void setThumb(String thumb) {
        this.thumb = thumb;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getUser_name() {
        return user_name;
    }

    public void setUser_name(String user_name) {
        this.user_name = user_name;
    }

    public String getDisplay_name() {
        return display_name;
    }

    public void setDisplay_name(String display_name) {
        this.display_name = display_name;
    }

    public String getAvatar() {
        return avatar;
    }

    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Picture> getPictureList() {
        if (pictureList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PictureDao targetDao = daoSession.getPictureDao();
            List<Picture> pictureListNew = targetDao._queryArticle_PictureList(id);
            synchronized (this) {
                if(pictureList == null) {
                    pictureList = pictureListNew;
                }
            }
        }
        return pictureList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPictureList() {
        pictureList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Favorite> getFavoriteList() {
        if (favoriteList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FavoriteDao targetDao = daoSession.getFavoriteDao();
            List<Favorite> favoriteListNew = targetDao._queryArticle_FavoriteList(id);
            synchronized (this) {
                if(favoriteList == null) {
                    favoriteList = favoriteListNew;
                }
            }
        }
        return favoriteList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFavoriteList() {
        favoriteList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

	@Override
	public int compareTo(Object another) {
		Article anotherA  = (Article)another;
		int result = Integer.valueOf(this.hits_total) > Integer.valueOf(anotherA.hits_total)?1:0;
		return result;
	}
    // KEEP METHODS END

}
