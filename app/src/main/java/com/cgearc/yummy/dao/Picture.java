package com.cgearc.yummy.dao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table PICTURE.
 */
public class Picture {

    private Long id;
    /** Not-null value. */
    private String uri;
    /** Not-null value. */
    private String height;
    /** Not-null value. */
    private String width;
    private long article_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PictureDao myDao;

    private Article article;
    private Long article__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Picture() {
    }

    public Picture(Long id) {
        this.id = id;
    }

    public Picture(Long id, String uri, String height, String width, long article_id) {
        this.id = id;
        this.uri = uri;
        this.height = height;
        this.width = width;
        this.article_id = article_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPictureDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getUri() {
        return uri;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUri(String uri) {
        this.uri = uri;
    }

    /** Not-null value. */
    public String getHeight() {
        return height;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setHeight(String height) {
        this.height = height;
    }

    /** Not-null value. */
    public String getWidth() {
        return width;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setWidth(String width) {
        this.width = width;
    }

    public long getArticle_id() {
        return article_id;
    }

    public void setArticle_id(long article_id) {
        this.article_id = article_id;
    }

    /** To-one relationship, resolved on first access. */
    public Article getArticle() {
        long __key = this.article_id;
        if (article__resolvedKey == null || !article__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ArticleDao targetDao = daoSession.getArticleDao();
            Article articleNew = targetDao.load(__key);
            synchronized (this) {
                article = articleNew;
            	article__resolvedKey = __key;
            }
        }
        return article;
    }

    public void setArticle(Article article) {
        if (article == null) {
            throw new DaoException("To-one property 'article_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.article = article;
            article_id = article.getId();
            article__resolvedKey = article_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
