package com.cgearc.yummy;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cgearc.yummy.Article;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ARTICLE.
*/
public class ArticleDao extends AbstractDao<Article, Long> {

    public static final String TABLENAME = "ARTICLE";

    /**
     * Properties of entity Article.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Body = new Property(1, String.class, "body", false, "BODY");
        public final static Property Hits_daily = new Property(2, String.class, "hits_daily", false, "HITS_DAILY");
        public final static Property Hits_total = new Property(3, String.class, "hits_total", false, "HITS_TOTAL");
        public final static Property Article_id = new Property(4, String.class, "article_id", false, "ARTICLE_ID");
        public final static Property Comments_count = new Property(5, String.class, "comments_count", false, "COMMENTS_COUNT");
        public final static Property Link = new Property(6, String.class, "link", false, "LINK");
        public final static Property Public_at = new Property(7, String.class, "public_at", false, "PUBLIC_AT");
        public final static Property Site_category = new Property(8, String.class, "site_category", false, "SITE_CATEGORY");
        public final static Property Thumb = new Property(9, String.class, "thumb", false, "THUMB");
        public final static Property Title = new Property(10, String.class, "title", false, "TITLE");
        public final static Property User_name = new Property(11, String.class, "user_name", false, "USER_NAME");
        public final static Property Display_name = new Property(12, String.class, "display_name", false, "DISPLAY_NAME");
        public final static Property Avatar = new Property(13, String.class, "avatar", false, "AVATAR");
    };

    private DaoSession daoSession;


    public ArticleDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ARTICLE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'BODY' TEXT NOT NULL ," + // 1: body
                "'HITS_DAILY' TEXT," + // 2: hits_daily
                "'HITS_TOTAL' TEXT," + // 3: hits_total
                "'ARTICLE_ID' TEXT," + // 4: article_id
                "'COMMENTS_COUNT' TEXT," + // 5: comments_count
                "'LINK' TEXT," + // 6: link
                "'PUBLIC_AT' TEXT," + // 7: public_at
                "'SITE_CATEGORY' TEXT," + // 8: site_category
                "'THUMB' TEXT," + // 9: thumb
                "'TITLE' TEXT," + // 10: title
                "'USER_NAME' TEXT," + // 11: user_name
                "'DISPLAY_NAME' TEXT," + // 12: display_name
                "'AVATAR' TEXT);"); // 13: avatar
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ARTICLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Article entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getBody());
 
        String hits_daily = entity.getHits_daily();
        if (hits_daily != null) {
            stmt.bindString(3, hits_daily);
        }
 
        String hits_total = entity.getHits_total();
        if (hits_total != null) {
            stmt.bindString(4, hits_total);
        }
 
        String article_id = entity.getArticle_id();
        if (article_id != null) {
            stmt.bindString(5, article_id);
        }
 
        String comments_count = entity.getComments_count();
        if (comments_count != null) {
            stmt.bindString(6, comments_count);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(7, link);
        }
 
        String public_at = entity.getPublic_at();
        if (public_at != null) {
            stmt.bindString(8, public_at);
        }
 
        String site_category = entity.getSite_category();
        if (site_category != null) {
            stmt.bindString(9, site_category);
        }
 
        String thumb = entity.getThumb();
        if (thumb != null) {
            stmt.bindString(10, thumb);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(11, title);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(12, user_name);
        }
 
        String display_name = entity.getDisplay_name();
        if (display_name != null) {
            stmt.bindString(13, display_name);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(14, avatar);
        }
    }

    @Override
    protected void attachEntity(Article entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Article readEntity(Cursor cursor, int offset) {
        Article entity = new Article( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // body
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hits_daily
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // hits_total
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // article_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // comments_count
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // link
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // public_at
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // site_category
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // thumb
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // title
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // user_name
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // display_name
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // avatar
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Article entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBody(cursor.getString(offset + 1));
        entity.setHits_daily(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHits_total(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setArticle_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setComments_count(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLink(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPublic_at(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSite_category(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setThumb(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTitle(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUser_name(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDisplay_name(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAvatar(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Article entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Article entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
